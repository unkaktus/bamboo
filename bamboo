#!/usr/bin/env python

from tabulate import tabulate
import subprocess
import os
import sys
import numpy as np
import pandas
import glob
import subprocess
import click
import json
from astropy import units as u, constants as const

@click.group()
def cli():
    pass

def is_bam_run(run_dir) -> bool:
    system_log_filename = os.path.join(run_dir, 'system.log')
    return os.path.isfile(system_log_filename)

def runstats(run_dir):
    system_log_filename = os.path.join(run_dir, 'system.log')

    with open(system_log_filename) as f:
        lines = f.readlines()
        last_line = lines[-1].split()
        time, speed = last_line[0], last_line[3]
        return time, speed

def robin_list():
    robin_output = subprocess.check_output(['robin', 'list', '--json'])
    robin_jobs = json.loads(robin_output)
    jobs = {}
    for robin_job in robin_jobs:
        jobs[robin_job["Name"]] = robin_job
    return jobs

def number_of_lines(filename):
    with open(filename, "rb") as f:
        num_lines = sum(1 for _ in f)
        return num_lines

def merger_status(run_dir):
    moving_puncture_filename_glob =  os.path.join(run_dir, 'moving_puncture_distance.lxyz*')
    mpd_filename = glob.glob(moving_puncture_filename_glob)[0]
    n_lines = number_of_lines(mpd_filename)
    mpd = np.loadtxt(mpd_filename, skiprows=n_lines-2)
    distance = mpd[-1,6]

    if distance > 1e-2:
        return "inspiral"
    if distance < 1e-2 and distance > 1e-12:
        return "merger"
    if distance < 1e-12:
        return "postmerger"

def count_lines(filename):
    with open(filename, "rbU") as f:
        num_lines = sum(1 for _ in f)
        return num_lines

def merger_time(run_dir):
    moving_puncture_filename_glob =  os.path.join(run_dir, 'moving_puncture_distance.lxyz*')
    mpunc_glob = glob.glob(moving_puncture_filename_glob)
    if len(mpunc_glob) == 0:
        return 0.0, "unknown"
    mpd_filename = mpunc_glob[0]
    skiprows = 1
    mpd = pandas.read_csv(mpd_filename, skiprows=skiprows, header=None, delimiter='\\s+', dtype=float).values
    d = mpd[:,6]

    threshold = 30
    d[d>threshold] = threshold

    time = mpd[:,8]
    gg = np.gradient(np.gradient(d))
    a = np.argmin(gg)
    merger_time = time[a]

    distance = d[-1]
    status = ""
    if distance > 1e-2:
        status = "inspiral"
    if distance < 1e-2 and distance > 1e-12:
        status = "merger"
    if distance < 1e-12:
        status = "postmerger"
    if status != "postmerger":
        merger_time = 0.0
    return merger_time, status


class GU():
    def __init__(self, v):
        self.v = v*u.Msun
        self.M = self._to(u.g)
        self.L = self._to(u.cm)
        self.T = self._to(u.s)
        self.Density = self.MLT(1, -3, 0)
        self.Energy = self.MLT(1, 2, -2)
        self.MagneticFluxDensity = self.MLT(1/2, -1/2, -1)
        self.Luminosity = self.Energy/self.T
    def _to(self, unit):
        if unit.is_equivalent(u.Msun):
            return self.v.to(unit)
        if unit.is_equivalent(u.cm):
            return (self.v*const.G/const.c**2).to(unit)
        if unit.is_equivalent(u.s):
            return (self.v*const.G/const.c**3).to(unit)
    def MLT(self, m, l, t):
        return self.M**m * self.L**l * self.T**t

@click.command()
@click.option('--target', default=32, help='Simulation evolution time target in ms')
def list(target):
    table_header = ["Name", "Location", "Time", "Speed", "Done in", "Merger Status", "State", "Progress"]
    jobs = {}
    try:
        jobs = robin_list()
    except Exception as e:
        print(e)

    run_dirs = [os.path.dirname(filename) for filename in glob.glob("**/system.log", recursive=True)]

    table = []

    for run_dir in run_dirs:
        run_name = os.path.basename(run_dir)
        location = os.path.dirname(run_dir)
        try:
            run_dir_path = os.path.join(os.getcwd(), run_dir)
            if not is_bam_run(run_dir_path):
              continue
            time, speed_str = runstats(run_dir_path)
            speed = float(speed_str.removesuffix('M/h')) * GU(1).T.to('ms') / u.h
            state, progress = ["-", "-"]
            if run_name in jobs:
                job = jobs[run_name]
                state = job["State"]
                progress = f'{(job["Walltime"] / job["RequestedWalltime"]) * 100:2.0f}%'
            m_time, m_status = merger_time(run_dir_path)
            time_ms = (float(time[:-1]) - m_time) * GU(1).T.to('ms').value
            time_str = f'{time} ({time_ms:.1f}ms)'
            if m_status == "postmerger":
                time_str = f'{time} ({time_ms:.1f}msam)'
                done_in = ((target * u.ms - time_ms*u.ms) / speed).to('d')
                done_in_str = f'{done_in.value:.2f}d'
            else:
                done_in_str = "-"
            if m_status == "unknown":
                m_status = "-"
                m_time = "-"
            table.append([run_name, location, time_str, speed_str, done_in_str, f'{m_status} ({m_time})', state, f'{progress}'])
        except Exception as e:
            print(e)
            table.append([run_name, location, "-", "-", "-", "-", "-", "-"])

    print(tabulate(table, headers=table_header, tablefmt='rounded_outline'))

cli.add_command(list)


def robin_submit(filename):
    robin_output = subprocess.check_output(['robin', 'submit', filename])
    print(str(robin_output))

@click.command()
@click.argument('name')
def submit(name):
    with open('job.py', 'r') as f:
        job_code = f.read()
        exec(job_code)
        print('Generated job.sh')
        robin_submit('job.sh')
        print('Submitted')

cli.add_command(submit)


if __name__ == '__main__':
    cli()
